const ValidationConfig = {
  errorClass: "ys-err-message",
  errorStyles: { color: "red", margin: "2px" },
};
!(function () {
  const e = document.createElement("style");
  (e.textContent = `\n    .${ValidationConfig.errorClass} {\n      color: ${ValidationConfig.errorStyles.color};\n      margin: ${ValidationConfig.errorStyles.margin};\n    }\n  `),
    document.head.appendChild(e);
})();
class Validator {
  constructor(e = {}) {
    (this.messages = {
      empty: "This input can't be empty.",
      number: "This input must be a number.",
      string: "This input must be text.",
      length: "This input must be longer than {min} characters.",
      email: "Please enter a valid email address.",
      pattern: "This input format is invalid.",
      ...e,
    }),
      (this.validationElements = null);
  }
  setMessages(e) {
    this.messages = { ...this.messages, ...e };
  }
  getMessage(e, t, s = {}) {
    let r = e.getAttribute(`data-message-${t}`) || this.messages[t];
    return (
      Object.entries(s).forEach(([e, t]) => {
        r = r.replace(`{${e}}`, t);
      }),
      r
    );
  }
  initializeElements() {
    this.validationElements = document.querySelectorAll('[class*="val-"]');
  }
  renderError(e, t, s) {
    const r = e.nextElementSibling;
    if (t)
      if (
        ((e.style.borderColor = "red"), r?.classList.contains("ys-err-message"))
      )
        r.textContent = s;
      else {
        const t = document.createElement("p");
        (t.className = "ys-err-message"),
          (t.textContent = s),
          e.insertAdjacentElement("afterend", t);
      }
    else
      r?.classList.contains("ys-err-message") &&
        ((e.style.borderColor = ""), r.remove());
  }
  isValueEmpty(e) {
    return /^(null|undefined|)$/.test(e);
  }
  validateNumberRule(e) {
    return /^\d+$/.test(e.value);
  }
  validateLengthRule(e) {
    const t = parseInt(e.className.match(/val-length-(\d+)/)[1]);
    return new RegExp(`^.{${t + 1},}$`).test(e.value);
  }
  validateEmailRule(e) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e.value);
  }
  validatePatternRule(e) {
    const t = e.getAttribute("data-pattern");
    if (!t) return !0;
    return new RegExp(t).test(e.value);
  }
  validateElement(e) {
    if (e.classList.contains("val-empty") && this.isValueEmpty(e.value))
      return this.renderError(e, !0, this.getMessage(e, "empty")), !1;
    if (this.isValueEmpty(e.value)) return this.renderError(e, !1), !0;
    if (e.classList.contains("val-number") && !this.validateNumberRule(e))
      return this.renderError(e, !0, this.getMessage(e, "number")), !1;
    if (e.className.includes("val-length") && !this.validateLengthRule(e)) {
      const t = parseInt(e.className.match(/val-length-(\d+)/)[1]);
      return (
        this.renderError(e, !0, this.getMessage(e, "length", { min: t })), !1
      );
    }
    return e.classList.contains("val-email") && !this.validateEmailRule(e)
      ? (this.renderError(e, !0, this.getMessage(e, "email")), !1)
      : e.classList.contains("val-pattern") && !this.validatePatternRule(e)
      ? (this.renderError(e, !0, this.getMessage(e, "pattern")), !1)
      : (this.renderError(e, !1), !0);
  }
  validate() {
    this.initializeElements();
    let e = !0;
    return (
      this.validationElements.forEach((t) => {
        this.validateElement(t) || (e = !1);
      }),
      e
    );
  }
  clearErrors() {
    document.querySelectorAll(".ys-err-message").forEach((e) => {
      (e.previousElementSibling.style.borderColor = ""), e.remove();
    });
  }
}
